"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (Prefect 3.0).
"""

import asyncio
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from flows.automated_training_flow import (
    automated_training_pipeline,
    manual_training_pipeline,
)


async def create_automated_deployment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞ —Å cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è Prefect 3.0."""

    print("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞...")

    deployment = await automated_training_pipeline.to_deployment(
        name="automated-ml-pipeline",
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ML –ø–∞–π–ø–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π—Å—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã",
        version="1.0.0",
        cron="*/2 * * * *",
        tags=["ml", "automated", "cron"],
    )

    deployment_id = await deployment.apply()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç: {deployment_id}")
    return deployment_id


async def create_manual_deployment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Prefect 3.0."""

    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞...")

    deployment = await manual_training_pipeline.to_deployment(
        name="manual-ml-pipeline",
        description="–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ ML –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞—Ç—á–∞",
        version="1.0.0",
        tags=["ml", "manual"],
    )

    deployment_id = await deployment.apply()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç: {deployment_id}")
    return deployment_id


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤."""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Prefect 3.0 –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤...")

    try:

        auto_id = await create_automated_deployment()
        manual_id = await create_manual_deployment()

        print("\n‚úÖ –í—Å–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: {auto_id}")
        print(f"   - –†—É—á–Ω–æ–π: {manual_id}")

        print("\nüîß –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print(
            "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ worker: poetry run prefect worker start --pool default-process-pool"
        )
        print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: poetry run prefect agent start -q default")
        print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã")
        print("\nüåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
        print("   - Prefect UI: http://localhost:4200")
        print("   - MLflow UI: http://localhost:5000")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤: {e}")
        print(
            "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Prefect —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: poetry run prefect server start"
        )
        return False

    return True


if __name__ == "__main__":

    success = asyncio.run(main())
